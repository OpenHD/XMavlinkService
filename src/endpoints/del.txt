/*void TCPEndpoint::loopInfinite() {
    //while (true){
        //listen for new connection
        boost::asio::ip::tcp::acceptor acceptor_(_io_service, boost::asio::ip::tcp::endpoint( boost::asio::ip::tcp::v4(), PORT));
        //waiting for connection
        std::cout<<"Waiting for client to connect\n";
        acceptor_.accept(_socket);
        std::cout<<"Connected\n";
        bool stillConnected= true;
        startReceive();
        /*while (stillConnected){
            std::cout<<"Reading data\n";
            try{
                startReceive();
            }catch(const std::exception& e){
                std::cout<<"read_some error ?"<<e.what()<<"\n";
                //stillConnected=false;
                std::this_thread::sleep_for(std::chrono::seconds(1));
            }
        }*/
    //}
    //listen for new connection
    /*boost::asio::ip::tcp::acceptor acceptor_(_io_service, boost::asio::ip::tcp::endpoint( boost::asio::ip::tcp::v4(), 1234 ));
    //waiting for connection
    acceptor_.accept(_socket);
    std::cout<<"Connected\n";
    while (true){
        std::cout<<"Reading data\n";
        const auto len=_socket.read_some(boost::asio::buffer(readBuffer, readBuffer.size()));
        if(len>0){
            parseNewData(readBuffer.data(),len);
        }
    }*/
    //read operation
    //std::string message = read_(socket_);
    //std::cout << message << endl;
    //write operation
    //send_(socket_, "Hello From Server!");
    //std::cout << "Servent sent Hello message to Client!" << std::endl;
//}

/*void TCPEndpoint::startLoopInfinite() {
    boost::thread t1(&TCPEndpoint::loopInfinite, this);
    //loopInfinite();
}*/